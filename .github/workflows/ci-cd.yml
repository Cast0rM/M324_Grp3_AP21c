name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 3. Install Python dependencies
      - name: Install Dependencies
        working-directory: Code/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Run Unit  Tests
      - name: Run Unit Tests
        working-directory: Code/backend
        run: |
          pytest test_pytestFastapi.py --maxfail=5 --disable-warnings

      - name: Test Database Connectivity
        run: |
          apt-get update && apt-get install -y mysql-client
          mysql -h testdbbands.c46zglqexctp.us-east-1.rds.amazonaws.com \
          -u admin \
          -ppassword \
          -D bands_db -e "SHOW TABLES;"

      - name: Run Integration Tests
        working-directory: Code/backend
        env:
          # BANDS_USERNAME: "${{ secrets.DATABASE_USERNAME }}"
          # BANDS_PASSWORD: "${{ secrets.DATABASE_PASSWORD }}"
          # TEST_BANDS_HOST: "testdbbands.c46zglqexctp.us-east-1.rds.amazonaws.com"
          # BANDS_DATABASE: "${{ secrets.BANDS_DATABASE_NAME }}"
          # BANDS_PORT: 3306
          BANDS_USERNAME: "admin"
          BANDS_PASSWORD: "password"
          TEST_BANDS_HOST: "testdbbands.c46zglqexctp.us-east-1.rds.amazonaws.com"
          BANDS_DATABASE: "bands_db"
          BANDS_PORT: 3306
        run: |
          echo "BANDS_USERNAME=${{ secrets.DATABASE_USERNAME }}"
          echo "BANDS_PASSWORD=${{ secrets.DATABASE_PASSWORD }}"
          echo "TEST_BANDS_HOST=${{ secrets.TEST_BANDS_URL }}"
          echo "BANDS_DATABASE=${{ secrets.BANDS_DATABASE_NAME }}"
          echo "BANDS_PORT=3306"
          pytest test_integration.py --maxfail=5 --disable-warnings

      # 5. Build Docker Image
      - name: Build Docker Image
        working-directory: Code/backend
        run: |
          docker build \
            --build-arg ALBUM_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --build-arg ALBUM_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg ALBUM_HOST=${{ secrets.ALBUM_DATABASE_URL }} \
            --build-arg ALBUM_PORT=3306 \
            --build-arg ALBUM_DATABASE=${{ secrets.ALBUM_DATABASE_NAME }} \
            --build-arg BANDS_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --build-arg BANDS_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg BANDS_HOST=${{ secrets.BANDS_DATABASE_URL }} \
            --build-arg BANDS_PORT=3306 \
            --build-arg BANDS_DATABASE=${{ secrets.BANDS_DATABASE_NAME }} \
            -t fastapi-application .

      # 6. Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Build and Push Docker Images with Dynamic Tagging
      - name: Build and Push Docker Images
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="latest"

          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION

          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION
