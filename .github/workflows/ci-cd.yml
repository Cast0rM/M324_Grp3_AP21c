name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13.0

      # 3. Install Python dependencies
      - name: Install Dependencies
        working-directory: Code/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Run Tests
      - name: Run Tests
        working-directory: Code/backend
        run: |
          pytest test_pytestFastapi.py --maxfail=5 --disable-warnings

      # 5. Build and Start Services with Docker Compose
      - name: Build and Start Services
        working-directory: Code
        env:
          ALBUM_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          ALBUM_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          ALBUM_HOST: ${{ secrets.ALBUM_DATABASE_URL }}
          ALBUM_PORT: 3306
          ALBUM_DATABASE: ${{ secrets.ALBUM_DATABASE_NAME }}
          BANDS_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          BANDS_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          BANDS_HOST: ${{ secrets.BANDS_DATABASE_URL }}
          BANDS_PORT: 3306
          BANDS_DATABASE: ${{ secrets.BANDS_DATABASE_NAME }}
        run: |
          docker compose up -d --build

      # 6. Wait for Services to Be Healthy
      - name: Wait for Services
        run: |
          echo "Waiting for services to be healthy..."
          sleep 30  # Adjust based on healthcheck durations

      # 7. Tear Down Services
      - name: Tear Down Services
        if: always()
        working-directory: Code
        run: docker compose down

      # 8. Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. Build and Push Docker Images with Dynamic Tagging
      - name: Build and Push Docker Images
        working-directory: Code
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD) # Get short commit hash
          VERSION="latest"  # You could replace this with a version strategy or tag, such as from a Git tag

          # Build the images with Docker Compose
          docker compose build

          # Tag the image with the commit hash and optionally the version
          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION

          # Push the images with both tags
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION

      # 10. Deploy to Production Server (Optional)
      # - name: Deploy to Production Server
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
      #     docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-application:latest
      #     cd /path/to/production/docker-compose/folder
      #     docker-compose down
      #     docker-compose up -d
      #     EOF
