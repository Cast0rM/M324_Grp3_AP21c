name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 3. Install Python dependencies
      - name: Install Dependencies
        working-directory: Code/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Run Unit  Tests
      - name: Run Unit Tests
        working-directory: Code/backend
        run: |
          pytest test_pytestFastapi.py --maxfail=5 --disable-warnings

      # 5. Build Docker Image
      - name: Build Docker Image
        working-directory: Code/backend
        run: |
          docker build \
            --build-arg ALBUM_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --build-arg ALBUM_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg ALBUM_HOST=${{ secrets.ALBUM_DATABASE_URL }} \
            --build-arg ALBUM_PORT=3306 \
            --build-arg ALBUM_DATABASE=${{ secrets.ALBUM_DATABASE_NAME }} \
            --build-arg BANDS_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --build-arg BANDS_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg BANDS_HOST=${{ secrets.BANDS_DATABASE_URL }} \
            --build-arg BANDS_PORT=3306 \
            --build-arg BANDS_DATABASE=${{ secrets.BANDS_DATABASE_NAME }} \
            -t fastapi-application .

      # 7. Wait for Services to Be Healthy
      - name: Wait for Services
        run: |
          echo "Waiting for services to be healthy..."
          sleep 30  # Adjust based on healthcheck durations

      # 8. Install Newman
      - name: Install Newman
        run: |
          sudo apt-get install -y nodejs npm
          npm install -g newman

      # 10. Run Integration Tests (Optional)
      # - name: Run Integration Tests
      #   working-directory: Code/backend
      #   run: |
      #     pytest integration_tests/ --disable-warnings

      # 11. Tear Down Services
      - name: Tear Down Services
        if: always()
        working-directory: Code
        run: docker compose down

      # 12. Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 13. Build and Push Docker Images with Dynamic Tagging
      - name: Build and Push Docker Images
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="latest"

          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker tag fastapi-application:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION

          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$COMMIT_HASH
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-application:$VERSION

      # 8.5. Run New Docker Container
      - name: Run New Docker Container
        run: |
          docker-compose up

      # 9. Run Postman System Tests
      - name: Run Postman Tests
        working-directory: Code
        run: |
          newman run collection.json

      # 14. Deploy to Production Server
      # - name: Deploy to Production Server
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
      #     docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-application:latest
      #     cd /path/to/production/docker-compose/folder
      #     docker-compose down
      #     docker-compose up -d
      #     EOF